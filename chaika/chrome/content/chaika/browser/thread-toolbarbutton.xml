<?xml version="1.0"?>

<bindings id="threadToolbarButtonBindings"
		xmlns="http://www.mozilla.org/xbl"
		xmlns:xbl="http://www.mozilla.org/xbl"
		xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<binding id="threadToolbarButton">
	<content>
		<xul:toolbarbutton label="chaika" class="toolbarbutton-1 thread-toolbarbutton" type="menu">
			<xul:menupopup anonid="menupopup" position="after_end">
				<xul:menu label="コピー" anonid="copy-menu">
					<xul:menupopup>
						<xul:menuitem label="タイトル" anonid="copy-title-menu" />
						<xul:menuitem label="URL" anonid="copy-url-menu" />
						<xul:menuitem label="タイトルと URL" anonid="copy-title-url-menu" />
					</xul:menupopup>
				</xul:menu>

				<xul:menuseparator anonid="copy-sep" />

				<xul:menuitem label="このスレッドに書き込む" anonid="write-menu" />
				<xul:menuitem label="このスレッドのログを削除" anonid="deleteLog-menu" />

				<xul:menuseparator anonid="thread-sep" />

				<xul:menuitem label="chaika で開く" anonid="viewChaika-menu" />
				<xul:menuitem label="ブラウザで開く" anonid="viewBrowser-menu" />

				<xul:menuseparator anonid="view-sep" />

				<xul:menuitem label="すべてのレスを表示" anonid="viewChange-all-menu"/>
				<xul:menuitem label="新着50件を表示" anonid="viewChange-l50-menu"/>
				<xul:menuitem label="スレッド一覧を開く" anonid="goToBoard-menu"/>
				<xul:menuitem label="次のスレッドを検索する" anonid="findNextThread-menu"/>

				<xul:menuseparator anonid="threadShow-sep" />

				<xul:menuitem label="サイドバーを表示" anonid="toggleSidebar-menu">
					<xul:observes element="viewChaikaSidebar" attribute="oncommand" />
					<xul:observes element="viewChaikaSidebar" attribute="type" />
					<xul:observes element="viewChaikaSidebar" attribute="checked" />
				</xul:menuitem>

				<xul:menuseparator anonid="sidebar-sep" />

				<xul:menuitem label="あぼーんマネージャ..." anonid="openAboneManager-menu"/>
				<xul:menuitem label="オプション..." anonid="openSettings-menu"/>
			</xul:menupopup>
		</xul:toolbarbutton>
	</content>

	<resources>
		<stylesheet src="chrome://chaika/skin/browser/thread-toolbarbutton.css"/>
	</resources>

	<implementation>
		<constructor><![CDATA[
			Components.utils.import("resource://chaika-modules/ChaikaCore.js", this);
			Components.utils.import("resource://chaika-modules/ChaikaBoard.js", this);
			Components.utils.import("resource://chaika-modules/ChaikaThread.js", this);
		]]></constructor>


		<!--
		/**
		 * 現在開いているスレッドのURLを返す
		 * @return {nsIURI} スレッドURL(chaika 形式ではない) ない場合はnullが返る
		 */
		-->
		<method name="_getCurrentThreadURL">
			<body><![CDATA[
				var currentURI = null;
				try{
					currentURI = getBrowser().currentURI.QueryInterface(Ci.nsIURL);
				}catch(ex){
					return null;
				}

				if(!this._isThread(currentURI)) return null;

				return this._getPlainURL(currentURI);
			]]></body>
		</method>


		<!--
		/**
		 * 現在開いている板、または開いているスレッドが所属している板のURLを返す
		 * @return {nsIURI} 板URL(chaika 形式ではない) ない場合はnullが返る
		 */
		-->
		<method name="_getCurrentBoardURL">
			<body><![CDATA[
				var currentURI = null;
				try{
					currentURI = getBrowser().currentURI.QueryInterface(Ci.nsIURL);
				}catch(ex){
					return null;
				}

				var threadURI = this._getCurrentThreadURL();
				if(threadURI){
					return this.ChaikaThread.getBoardURL(threadURI);
				}else if(this._isBoard(currentURI)){
					return this._getPlainURL(currentURI);
				}

				return null;
			]]></body>
		</method>


		<!--
		/**
		 * chaika 形式の URL を標準の形式に変換する
		 * @param {nsIURI|String} aURI 変換するURL
		 * @return {nsIURI} 変換後の URL 変換できなかった場合はnullが返る
		 */
		-->
		<method name="_getPlainURL">
			<parameter name="aURI"/>
			<body><![CDATA[
				if(!(aURI instanceof Components.interfaces.nsIURI)){
					aURI = Services.io.newURI(aURI, null, null).QueryInterface(Ci.nsIURI);
				}

				if(!this._isChaika(aURI)) return aURI;

				var plainURL = aURI.path.substring(1).replace(/^thread\//, "");

				plainURL = plainURL.replace("/test/read.html/", "/test/read.cgi/")
									.replace("/test/mread.cgi/", "/test/read.cgi/");

				try{
					return Services.io.newURI(plainURL, null, null);
				}catch(ex){
					return null;
				}
			]]></body>
		</method>


		<!--
		/**
		 * chaika 形式の URL であるかどうかを返す
		 * @param {nsIURI|String} aURI 調べる URL
		 * @return {Boolean}
		 */
		-->
		<method name="_isChaika">
			<parameter name="aURI"/>
			<body><![CDATA[
				try{
					if(!(aURI instanceof Components.interfaces.nsIURI)){
						aURI = Services.io.newURI(aURI, null, null).QueryInterface(Ci.nsIURI);
					}

					var isThread = (aURI.host === "localhost" || aURI.host === "127.0.0.1") &&
									aURI.path.substring(0, 8) === "/thread/";
					var isBoard = aURI.spec.lastIndexOf("chaika://board/", 0) !== -1;

					return isThread || isBoard;
				}catch(ex){
					return false;
				}
			]]></body>
		</method>


		<!--
		/**
		 * 掲示板の URL であるかどうかを返す
		 * @param {nsIURI|String} aURI 調べる URL
		 * @return {Boolean}
		 */
		-->
		<method name="_isBBS">
			<parameter name="aURI"/>
			<body><![CDATA[
				var plainURL = this._getPlainURL(aURI);
				return this.ChaikaBoard.getBoardType(plainURL) !== this.ChaikaBoard.BOARD_TYPE_PAGE;
			]]></body>
		</method>


		<!--
		/**
		 * スレッドの URL であるかどうかを返す
		 * @param {nsIURI|String} aURI 調べる URL
		 * @return {Boolean}
		 */
		-->
		<method name="_isThread">
			<parameter name="aURI"/>
			<body><![CDATA[
				return this._isBBS(aURI) && /\/(?:test|bbs)\/m?read\.(?:cgi|html)\//.test(aURI.spec || aURI);
			]]></body>
		</method>


		<!--
		/**
		 * 板の URL であるかどうかを返す
		 * @param {nsIURI|String} aURI 調べる URL
		 * @return {Boolean}
		 */
		-->
		<method name="_isBoard">
			<parameter name="aURI"/>
			<body><![CDATA[
				return this._isBBS(aURI) && !this._isThread(aURI);
			]]></body>
		</method>


		<!--
		/**
		 * メニューの表示・非表示を変える
		 * 開いているページが変更されるたびに呼び出される
		 */
		-->
		<method name="showCheck">
			<body><![CDATA[
				if(!this.ChaikaCore.pref.getBool('enable_browser_toolbarbutton')){
					this.hidden = true;
					return;
				}

				const currentURI = getBrowser().currentURI;
				const isBBS = this._isBBS(currentURI);
				const isChaika = this._isChaika(currentURI);
				const isThread = this._isThread(currentURI);
				const isBoard = this._isBoard(currentURI);

				if(this.ChaikaCore.pref.getBool('browser_toolbarbutton_only_bbs') && !isBBS){
					this.hidden = true;
					return;
				}

				this.hidden = false;

				var menupopup = document.getAnonymousElementByAttribute(this, "anonid", "menupopup");
				Array.slice(menupopup.childNodes).forEach(function(item, i, a){
					item.hidden = false;
				});

				var hiddenItems = [];

				if(!isBBS){
					hiddenItems = hiddenItems.concat([
						'copy-menu',
						'copy-sep',
						'write-menu',
						'deleteLog-menu',
						'thread-sep',
						'viewChaika-menu',
						'viewBrowser-menu',
						'view-sep',
						'viewChange-all-menu',
						'viewChange-l50-menu',
						'goToBoard-menu',
						'findNextThread-menu',
						'threadShow-sep',
					]);
				}else{
					if(isBoard){
						hiddenItems = hiddenItems.concat([
							'viewChange-all-menu',
							'viewChange-l50-menu',
							'goToBoard-menu',
							'findNextThread-menu',
							'threadShow-sep',
						]);
					}

					if(!isChaika){
						hiddenItems = hiddenItems.concat([
							'write-menu',
							'deleteLog-menu',
							'thread-sep',
							'viewBrowser-menu',
						]);
					}else{
						hiddenItems.push('viewChaika-menu');
					}
				}

				hiddenItems.forEach(function(anonid){
					document.getAnonymousElementByAttribute(this, 'anonid', anonid).hidden = true;
				}, this);
			]]></body>
		</method>


		<!--
		/**
		 * メニューのコマンドを実行する
		 * @param {Event} aEvent
		 * @param {Boolean} aMiddleClicked 中クリックかどうか
		 */
		-->
		<method name="_doCommand">
			<parameter name="aEvent"/>
			<parameter name="aMiddleClicked"/>
			<body><![CDATA[
				var menupopup = document.getAnonymousElementByAttribute(this, "anonid", "menupopup");
				function hidePopupMenu(){
					if(aMiddleClicked){
						menupopup.hidePopup();
					}
				}

				var targetElement = aEvent.originalTarget;
				var anonymousID = targetElement.getAttribute("anonid");

				var addTab = this.ChaikaCore.pref.getBool("browser_toolbarbutton_add_tab_by_click");
				if(aMiddleClicked || aEvent.ctrlKey || aEvent.metaKey){
					addTab = !addTab;
				}

				switch(anonymousID){
					case "copy-title-menu":
					case "copy-url-menu":
					case "copy-title-url-menu":
						if(aMiddleClicked) break;

						var text = "";

						switch(anonymousID){
							case "copy-title-menu":
								text = "%TITLE%";
								break;

							case "copy-url-menu":
								text = "%URL%";
								break;

							case "copy-title-url-menu":
								text = "%TITLE%%NEWLINE%%URL%";
								break;
						}

						this._copyClipBoard(text);
						break;

					case "goToBoard-menu":
						this._goToBoard(addTab);
						hidePopupMenu();
						break;

					case "write-menu":
						if(!aMiddleClicked) this._write();
						break;

					case "deleteLog-menu":
						if(!aMiddleClicked) this._deleteLog();
						break;

					case "viewChange-all-menu":
						this._viewChange("./", addTab);
						hidePopupMenu();
						break;

					case "viewChange-l50-menu":
						this._viewChange("./l50", addTab);
						hidePopupMenu();
						break;

					case "viewBrowser-menu":
						this._viewBrowser(null, addTab);
						hidePopupMenu();
						break;

					case "viewChaika-menu":
						var disregardURLOption = this.ChaikaCore.pref.getBool(
													"browser_toolbarbutton_disregard_url_option");
						this._viewChaika(null, addTab, disregardURLOption);
						hidePopupMenu();
						break;

					case "findNextThread-menu":
						this._findNextThread(addTab);
						hidePopupMenu();
						break;

					case "openAboneManager-menu":
						if(!aMiddleClicked) this._openAboneManager();
						break;

					case "openSettings-menu":
						if(!aMiddleClicked) this._openSettings();
						break;
				}
			]]></body>
		</method>


		<!--
		/**
		 * 板を開く
		 * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
		 */
		-->
		<method name="_goToBoard">
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var boardURL = this._getCurrentBoardURL();
				if(boardURL){
					var currentURI = getBrowser().currentURI;

					if(this._isChaika(currentURI)){
						this.ChaikaCore.browser.openBoard(boardURL, aAddTab);
					}else{
						this.ChaikaCore.browser.openURL(boardURL, aAddTab);
					}
				}
			]]></body>
		</method>


		<!--
		/**
		 * 書き込みウィザードを開く
		 */
		-->
		<method name="_write">
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				var postWizardURLSpec = "chrome://chaika/content/post/wizard.xul";
				var threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;
				window.openDialog(postWizardURLSpec, "_blank",
							"chrome, resizable, dialog", threadPlainURL.spec);
			]]></body>
		</method>


		<!--
		/**
		 * ログを削除する
		 */
		-->
		<method name="_deleteLog">
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				if(this.ChaikaCore.pref.getBool("warn_when_delete_log")){
					var result = Services.prompt.confirm(null, "ログの削除 [chaika]",
									"このスレッドのログを削除しますか?");
					if(!result) return;
				}

				try{
					var thread = new this.ChaikaThread(threadURL);
					thread.deleteThreadData();
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
				}
			]]></body>
		</method>


		<!--
		/**
		 * スレッドの表示オプションを変更する
		 * @param {String} aOption 表示オプション "./l30", "./45-", "./" など
		 * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
		 */
		-->
		<method name="_viewChange">
			<parameter name="aOption"/>
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var threadURL = this._getCurrentThreadURL();
				if(!threadURL) return;

				var currentURL = getBrowser().currentURI;

				try{
					var threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;
					threadURL = Services.io.newURI(aOption, null, threadPlainURL);
					this.ChaikaCore.browser.openThread(threadURL, aAddTab, false, !this._isChaika(currentURL));
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
				}
			]]></body>
		</method>


		<!--
		/**
		 * ブラウザで開く
		 * @param {nsIURI|String} [aURI] 開くURL 省略時は現在開いているスレッドまたは板になる
		 * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
		 */
		-->
		<method name="_viewBrowser">
			<parameter name="aURI"/>
			<parameter name="aAddTab"/>
			<body><![CDATA[
				var url = aURI || this._getCurrentThreadURL() || this._getCurrentBoardURL();
				if(!url) return;

				url = this._getPlainURL(url);
				if(url){
					/* スレッドリダイレクタを回避 */
					url = Services.io.newURI(url.spec + '?chaika_force_browser=1', null, null);

					this.ChaikaCore.browser.openURL(url, aAddTab);
				}
			]]></body>
		</method>


		<!--
		/**
		 * chaika で開く
		 * @param {nsIURI|String} [aURI] 開くURL 省略時は現在開いているスレッドまたは板になる
		 * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
		 * @param {Boolean} [disregardOption=false] 表示制限を置き換えるかどうか
		 */
		-->
		<method name="_viewChaika">
			<parameter name="aURI"/>
			<parameter name="aAddTab"/>
			<parameter name="disregardOption"/>
			<body><![CDATA[
				var url = aURI || this._getCurrentThreadURL() || this._getCurrentBoardURL();
				if(!url) return;

				try{
					if(this._isBoard(url)){
						var boardURL  = this._getPlainURL(url);
						this.ChaikaCore.browser.openBoard(boardURL, aAddTab);
					}else{
						var threadURL = this._getPlainURL(url);
						this.ChaikaCore.browser.openThread(threadURL, aAddTab, disregardOption, false);
					}
				}catch(ex){
					this.ChaikaCore.logger.error(ex);
					return;
				}
			]]></body>
		</method>


		<!--
		/**
		 * 次のスレッドを検索する
		 * FoxAge2ch がインストールされている時は FoxAge2ch の次スレ検索機能を呼び出す
		 * ない場合は板一覧でスレタイで検索する
		 * @param {Boolean} [aAddTab=false] 板一覧で検索する場合に新規タブで開くかどうか
		 */
		-->
		<method name="_findNextThread">
			<parameter name="aAddTab" />
			<body><![CDATA[
				const FOX_AGE_2CH = !!document.getElementById("viewFoxAge2chSidebar");

				var threadURI = this._getCurrentThreadURL();
				if(!threadURI) return;

				//FoxAge2chがインストールされている場合は
				//FoxAge2chの次スレ検索機能の使用を試みる
				if(FOX_AGE_2CH){
					//FoxAge2chに登録されている場合のみ次スレ検索が可能
					let FoxAge2chUtils = (Components.utils.import("resource://foxage2ch/utils.jsm", {})).FoxAge2chUtils;
                    let [boardID, threadID] = FoxAge2chUtils.parseFromURL(threadURI.spec);
					let item = FoxAge2chUtils.service.getItem(threadID);

					if(item){
						window.openDialog(
							"chrome://foxage2ch/content/findThread.xul", "FoxAge2ch:FindThread",
							"chrome,centerscreen,modal,dialog=no,all", threadID
						);
						return;
					}
				}

				//FoxAge2chがインストールされていない場合および
				//FoxAge2chに未登録のスレッドの場合は
				//chaika の検索機能を使用する

				//検索文字列
				let query = (new this.ChaikaThread(threadURI)).title;

				//最も後ろの数字がある場所を探索する
				//String#lastIndexOfには正規表現が渡せないため、
				//reverseしてからsearchを用いる
				let index = query.split('').reverse().join('').search(/\d+/);

				//もし中間よりも後に数字が存在した場合、それより後ろをカットする
				if(index !== -1 && (index + 1) < (query.length / 2)){
					query = query.replace(/^(.*?)\d+\D*$/, '$1');
				}

				//検索文字列を設定して板を開く
				let boardURL = this._getCurrentBoardURL();
				let searchURL = Services.io.newURI(boardURL.spec + '?query=' + encodeURIComponent(query), null, null);

				this.ChaikaCore.browser.openBoard(searchURL, aAddTab);
			]]></body>
		</method>


		<!--
		/**
		 * あぼーんマネージャを開く
		 * @param {String} aData あぼーんマネージャに送るデータ(右クリックあぼーんで使用)
		 */
		-->
		<method name="_openAboneManager">
			<parameter name="aData"/>
			<body><![CDATA[
				var aboneManagerURL = "chrome://chaika/content/settings/abone-manager.xul";
				window.openDialog(aboneManagerURL, "_blank", "chrome, resizable, toolbar", aData);
			]]></body>
		</method>


		<!--
		/**
		 * 設定画面を開く
		 */
		-->
		<method name="_openSettings">
			<body><![CDATA[
				var settingDialogURL = "chrome://chaika/content/settings/settings.xul";
				var features = "";
				try{
					var instantApply = Services.prefs.getBoolPref("browser.preferences.instantApply");
					features = "chrome,titlebar,toolbar,centerscreen" + (instantApply ? ",dialog=no" : ",modal");
				}catch(ex){
					features = "chrome,titlebar,toolbar,centerscreen,modal";
				}
				window.openDialog(settingDialogURL, "", features);
			]]></body>
		</method>


		<!--
		/**
		 * クリップボードに指定された文字をコピーする
		 * @param {String} text コピーする文字列
		 * @note 特殊文字一覧 %TITLE%: ページタイトル, %URL%: ページURL, %SEL: 選択文字列, %NEWLINE%: 改行
		 */
		-->
		<method name="_copyClipBoard">
			<parameter name="text"/>
			<body><![CDATA[
				var osname= Services.appinfo.OS;
				const NEWLINE = (osname== "Darwin") ? "\n" : "\r\n";

				var url = (this._getCurrentThreadURL() || getBrowser().currentURI).spec;

				text = text.replace("%TITLE%", content.document.title, "g")
							.replace("%URL%", url, "g")
							.replace("%SEL%", content.getSelection().toString(), "g")
							.replace("%NEWLINE%", NEWLINE, "g");

				var clipboard = Cc["@mozilla.org/widget/clipboardhelper;1"]
									.getService(Ci.nsIClipboardHelper);
				clipboard.copyString(text);
			]]></body>
		</method>
	</implementation>

	<handlers>
		<handler event="command" action="this._doCommand(event, false)"/>
		<handler event="click" button="1" action="this._doCommand(event, true)"/>
	</handlers>
</binding>


</bindings>
